Формулировка задачи - классификация набора экспериментальных данных для определения возможности определения пяти различных спиртов с помощью двухканального газового датчика. Задача взята как наиболее близкая к решаемой научной проблеме распознавания газов с помощью сенсора ввиду отсутствия требуего объема экспериментальных данных в табличном виде. По результатам работы планирую получить нужный набор данных и в своей лаборатории.


Для работы взят набор данных из работы

M. Fatih Adak, Peter Lieberzeit, Purim Jarujamrus, Nejat Yumusak, Classification of alcohols obtained by QCM sensors with different characteristics using ABC based neural network, Engineering Science and Technology, an International Journal, 2019, Volume 23, Issue 3, June 2020, Pages 463-469
https://doi.org/10.1016/j.jestch.2019.06.011
 https://archive.ics.uci.edu/ml/datasets/Alcohol+QCM+Sensor+Dataset


Сам набор данных и файл *.py (заготовка проекта) загружены на сервер GitHub:

https://github.com/qrspeter/ml_alcohol.git

=-=-=-=-==-=-=


1.Выбрать и обосновать метрику для измерения качества.

В качестве метрики выбрана классификации, потому что задача - распознавание известных химических веществ по показаниям сенсоров. Экспериментальные данные должны быть сами классифицированы и после обучения алгоритм должен распознавать какой именно газ присутствует.


2.Провести EDA на своих данных

В наборе данных есть 5 типов набора: QCM3, QCM6, QCM7, QCM10, QCM12.
В каждом наборе данных существует классификация спиртов пяти типов:
1-октанол, 1-пропанол, 2-бутанол, 2-пропанол, 1-изобутанол
В этом исследовании используются пять различных датчиков газа QCM, и анализируется пять
упомянутых выше газов в каждом из этих датчиков.
Проба газа проходит через датчик в пяти различных концентрациях, отличающихся объемным отношением воздуха и газа:
1) 0,799 / 0,201
2) 0,700 / 0,300
3) 0,600 / 0,400
4) 0,501 / 0,499
5) 0,400 / 0,600

В этих датчиках QCM есть два разных канала. Один канал включает полимеры с молекулярным импринтингом (MIP), а другой включает наночастицы (NP). Пять типов датчика получены  использованием различных соотношений MIP и NP, эти соотношения для тиспользуемых датчиков следующие:
QCM3 1 / 1
QCM6 1  /0
ККМ7 1 / 0,5
QCM10 1 / 2
QCM12 0 / 1

Эти данные были загружены в одну общую таблицу (dataframe, см. файл df_full2.csv), состоящую из следующих колонок, соответветствующих концентрации, типу сенсора, измеренным данным, и типу спирта:

'Concentration', 'Sensor', 'Readings','1-Octanol', '1-Propanol', '2-Butanol', '2-propanol', '1-isobutanol'

Для загрузки тип сенсора был преобразован в числовую форму как доля MIP в сенсоре (от 0 до 1).

Концентрация была взята как доля спирта в смеси (и составила от 0,2 до 0,6)

Итоговые данные были визуализированы с использованием метода RCA  с выбором трех главных компонент (изображения с цветовой кодировкой разных пременных прикреплены к ответу), а также корреляционного анализ компонент и диаграммы рассеяния, но выводы сделать какие-то сложно (изображения также приведены).


3.Построить и оценить качество бейзлайна

Для анализа составлен отдельный список типов спиртов, соответствующий экспериментальной выборке.

Бейзлайновая модель обучена на тренировочной выборке, проведено измерение качества константного предсказания, показывающая что в начальном виде предсказание не отличается точностью, хотя второй метод очевидно точнее:

# accuracy of dummy clf is  0.1853035143769968
# accuracy of log reg is  0.35782747603833864

Можно предположить, что исследование надо проводить немного иначе, сравнивая эффективность предсказания для разных типов сенсора, для чего анализировать не всю таблицу целиком, а пять отдельных частей.


PS Рабочий каталог проекта - https://github.com/qrspeter/ml_alcohol


===================

Оценка 	24,00 / 30,00

Добрый день!

В целом по сути задания все выглядит хорошо, оставлю несколько комментариев:

    Касаемо выбора метрики, у вас указано, что "В качестве метрики выбрана классификации", но классификация - это задача, которая решается, а метрику уже необходимо выбирать из множества метрик классификации (accuracy, precision, recall и тп). В итоге вы считали на данных accuracy, но получается, что обоснования пока не привели. При выборе accuracy как минимум стоит убедиться, что классы сбалансированы.
    Так как у вас довольно много файлов в репозитории, лучше структурировать файлы в репозитории, например, разложив все хотя бы по папкам data, imgs, src
    По поводу масштабирования - его необходимо делать после разбиения на train/test и код будет выглядеть как

scaler = MinMaxScaler()
scaled_X_train = scaler.fit_transform(X_train)
scaled_X_test = scaler.transform(X_test)
то есть, "учим" scaler на train части и затем обученным объектом трансформируем test. На всякий случай добавлю, что трансформацию целевой переменной делать не нужно

    Также я не стала останавливаться на некоторых неоптимальностях и проблемах со стилем кода на python, поскольку это не входит в программу курса, но на всякий случай, если в какой-то момент понадобится привести код в соответствии со стандартами, можно обратиться к инструментам из лекции о воспроизводимости - flake8, black, pylint и ознакомиться с pep8

Заметила в скриптах закомментированные вопросы - это вопросы ко мне или просто мысли по ходу выполнения?
